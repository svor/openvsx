schemaVersion: 2.2.2
metadata:
  name: openvsx
components:
  - name: tool
    container:
      image: quay.io/devfile/universal-developer-image:ubi8-latest
      memoryRequest: 256Mi
      memoryLimit: 8Gi
      cpuRequest: 100m
      cpuLimit: 2000m
      env:
        - name: OPENVSX_NAMESPACE
          value: openvsx
      volumeMounts:
        - name: local
          path: /home/user/.local/
  - name: elasticsearch
    container:
      image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
      memoryRequest: 256Mi
      memoryLimit: 2Gi
      cpuRequest: 100m
      cpuLimit: 800m
      endpoints:
        - exposure: internal
          name: elasticsearch
          protocol: tcp
          targetPort: 9200
        - exposure: internal
          name: es9300
          protocol: tcp
          targetPort: 9300
        - exposure: public
          name: che-server
          targetPort: 8080
        - exposure: public
          name: che-webui
          targetPort: 3000
      env:
        - name: bootstrap.memory_lock
          value: 'true'
        - name: cluster.routing.allocation.disk.threshold_enabled
          value: 'false'
        - name: discovery.type
          value: single-node
        - name: xpack.ml.enabled
          value: 'false'
        - name: xpack.security.enabled
          value: 'false'
  - name: postgresql
    container:
      image: 'image-registry.openshift-image-registry.svc:5000/openshift/postgresql:15-el8'
      memoryRequest: 256Mi
      memoryLimit: 2Gi
      cpuRequest: 100m
      cpuLimit: '1'
      env:
        - name: POSTGRESQL_USER
          value: openvsx
        - name: POSTGRESQL_PASSWORD
          value: openvsx
        - name: POSTGRESQL_DATABASE
          value: openvsx
  - volume:
      ephemeral: true
    name: local

commands:
  - id: build-cli
    exec:
      label: "1.1. Build OVSX CLI"
      component: tool
      workingDir: ${PROJECTS_ROOT}/openvsx/cli
      commandLine: |
        yarn install &&
        yarn prepare

  - id: build-webui
    exec:
      label: "1.2. Build UI Component"
      component: tool
      workingDir: ${PROJECTS_ROOT}/openvsx/webui
      commandLine: |
        yarn install &&
        yarn build &&
        yarn build:default

  - id: build-server
    exec:
      label: "1.3. Build Server Component"
      component: tool
      workingDir: ${PROJECTS_ROOT}/openvsx
      commandLine: |
        server/gradlew -p server assemble downloadTestExtensions

  - id: run-server
    exec:
      label: "1.4. Run OpenVSX Server"
      component: tool
      workingDir: ${PROJECTS_ROOT}/openvsx/server
      commandLine: |
        ./scripts/generate-properties.sh &&
        sed -i 's/localhost:5432\/postgres/localhost:5432\/openvsx/g' src/dev/resources/application.yml &&
        sed -i 's/username: gitpod/username: openvsx/g' src/dev/resources/application.yml &&
        sed -i 's/password: gitpod/password: openvsx/g' src/dev/resources/application.yml &&
        ./gradlew runServer

  - id: run-webui
    exec:
      label: "1.5. Run OpenVSX WebUI"
      component: tool
      workingDir: ${PROJECTS_ROOT}/openvsx/webui
      commandLine: |
        yarn start:default

  - id: cli-publish
    exec:
      label: "1.6. Publish extensions by OVSX CLI"
      component: tool
      workingDir: ${PROJECTS_ROOT}/openvsx
      commandLine: |
        export OVSX_REGISTRY_URL=http://localhost:8080
        export OVSX_PAT=super_token
        export PUBLISHERS="DotJoshJohnson eamodio felixfbecker formulahendry HookyQR ms-azuretools ms-mssql ms-python ms-vscode octref redhat ritwickdey sburg vscode vscodevim Wscats"
        for pub in $PUBLISHERS; do cli/lib/ovsx create-namespace $pub; done
        find server/build/test-extensions-builtin -name '*.vsix' -exec cli/lib/ovsx publish '{}' \;
        find server/build/test-extensions -name '*.vsix' -exec cli/lib/ovsx publish '{}' \;

# Commands to deploy OpenVSX to OpenShift
  - id: oc-login
    exec:
      label: "2.1. OC log-in"
      commandLine: |
        echo "Please log in to the OpenShift cluster as a cluster admin using the oc command"
      component: tool

  - id: build-openvsx-image
    exec:
      label: "2.2. Build and Publish OpenVSX Image"
      component: tool
      workingDir: ${PROJECTS_ROOT}/openvsx/openshift
      commandLine: |
          read -p "Please enter the value for OPENVSX_VERSION (default: v0.17.0): " OPENVSX_VERSION
          OPENVSX_VERSION=${OPENVSX_VERSION:-v0.17.0}
          export OPENVSX_VERSION
          echo "OPENVSX_VERSION is set to $OPENVSX_VERSION"
          podman build -t "openvsx:$OPENVSX_VERSION" --build-arg "OPENVSX_VERSION=$OPENVSX_VERSION" -f openvsx.Dockerfile .&&
          oc new-project $OPENVSX_NAMESPACE
          export IMAGE=image-registry.openshift-image-registry.svc:5000/$OPENVSX_NAMESPACE/openvsx &&
          podman tag openvsx:$OPENVSX_VERSION ${IMAGE} &&
          podman login --tls-verify=false -u $(oc whoami | tr -d :) -p $(oc whoami -t) image-registry.openshift-image-registry.svc:5000 &&
          podman push --tls-verify=false "${IMAGE}"

  - id: build-ovsx-cli-image
    exec:
      label: "2.3. Build and Publish OpenVSX CLI Image"
      component: tool
      workingDir: ${PROJECTS_ROOT}/openvsx/openshift
      commandLine: |
          podman build -t "openvsx-cli" -f cli.Dockerfile .&&
          export IMAGE=image-registry.openshift-image-registry.svc:5000/$OPENVSX_NAMESPACE/openvsx-cli &&
          podman tag openvsx-cli ${IMAGE} &&
          podman login --tls-verify=false -u $(oc whoami | tr -d :) -p $(oc whoami -t) image-registry.openshift-image-registry.svc:5000 &&
          podman push --tls-verify=false "${IMAGE}"

  - id: deploy-openvsx
    exec:
      label: "2.4. Deploy OpenVSX"
      component: tool
      workingDir: ${PROJECTS_ROOT}/openvsx/openshift
      commandLine: |
          oc process -f openvsx-deployment.yml \
          -p OPENVSX_SERVER_IMAGE=image-registry.openshift-image-registry.svc:5000/$OPENVSX_NAMESPACE/openvsx \
          -p OPENVSX_CLI_IMAGE=image-registry.openshift-image-registry.svc:5000/$OPENVSX_NAMESPACE/openvsx-cli \
          | oc apply -f -

  - id: enable-internal-openvsx
    exec:
      label: "2.5. Configure Che to use the internal Open VSX registry"
      component: tool
      workingDir: ${PROJECTS_ROOT}/openvsx/openshift
      commandLine: |
          export CHECLUSTER_NAME="$(kubectl get checluster --all-namespaces -o json | jq -r '.items[0].metadata.name')" &&
          export CHECLUSTER_NAMESPACE="$(kubectl get checluster --all-namespaces -o json | jq -r '.items[0].metadata.namespace')" &&
          export OPENVSX_ROUTE_URL="$(oc get route internal -n openvsx -o jsonpath='{.spec.host}')" && 
          export PATCH='{"spec":{"components":{"pluginRegistry":{"openVSXURL":"https://'"$OPENVSX_ROUTE_URL"'"}}}}' &&
          kubectl patch checluster "${CHECLUSTER_NAME}" --type=merge --patch "${PATCH}" -n "${CHECLUSTER_NAMESPACE}"
