apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: che-openvsx
objects:
- apiVersion: v1
  kind: Namespace
  metadata:
    name: "${NAMESPACE}"
    labels:
      name: openvsx
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: postgresql
    namespace: "${NAMESPACE}"
    labels:
      app: postgresql
      app.kubernetes.io/component: postgresql
      app.kubernetes.io/instance: postgresql
  spec:
    replicas: 1
    selector:
      matchLabels:
        deployment: postgresql
    template:
      metadata:
        labels:
          app: openvsx
          deployment: postgresql
          app.kubernetes.io/name: openvsx
          app.kubernetes.io/instance: openvsx
          app.kubernetes.io/component: postgresql
      spec:
        containers:
          - name: postgresql
            image: ${POSTGERSQL_IMAGE}
            imagePullPolicy: Always
            env:
              - name: POSTGRESQL_DATABASE
                value: openvsx
              - name: POSTGRESQL_USER
                value: openvsx
              - name: POSTGRESQL_PASSWORD
                value: openvsx
            ports:
              - containerPort: 5432
                protocol: TCP
            resources:
              requests:
                cpu: 200m
                memory: 512Mi
              limits:
                cpu: '1'
                memory: 2Gi
            livenessProbe:
              exec:
                command:
                  - pg_isready
                  - -U
                  - openvsx
              initialDelaySeconds: 30
              periodSeconds: 10
              failureThreshold: 3
              timeoutSeconds: 5
            readinessProbe:
              exec:
                command:
                  - pg_isready
                  - -U
                  - openvsx
              initialDelaySeconds: 15
              periodSeconds: 10
              failureThreshold: 3
            securityContext:
              capabilities:
                drop:
                  - ALL
- apiVersion: v1
  kind: Service
  metadata:
    name: postgresql
    namespace: "${NAMESPACE}"
    labels:
      app: postgresql
      app.kubernetes.io/component: postgresql
      app.kubernetes.io/instance: postgresql
  spec:
    ports:
      - name: "5432"
        port: 5432
        targetPort: 5432
        protocol: TCP
    selector:
      deployment: postgresql
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: elasticsearch
    namespace: "${NAMESPACE}"
    labels:
      app: elasticsearch
      app.kubernetes.io/component: elasticsearch
      app.kubernetes.io/instance: elasticsearch
  spec:
    replicas: 1
    selector:
      matchLabels:
        deployment: elasticsearch
    template:
      metadata:
        labels:
          deployment: elasticsearch
      spec:
        containers:
          - name: elasticsearch
            image: ${OPENVSX_ELASTICSEARCH_IMAGE}
            ports:
              - containerPort: 9300
                protocol: TCP
              - containerPort: 9200
                protocol: TCP
            imagePullPolicy: Always
            env:
              - name: bootstrap.memory_lock
                value: 'true'
              - name: cluster.routing.allocation.disk.threshold_enabled
                value: 'false'
              - name: discovery.type
                value: single-node
              - name: xpack.ml.enabled
                value: 'false'
              - name: xpack.security.enabled
                value: 'false'
            resources:
              requests:
                cpu: 500m
                memory: 1Gi
              limits:
                cpu: '1'
                memory: 2Gi
            livenessProbe:
              exec:
                command:
                  - sh
                  - -c
                  - |
                    curl -s http://elasticsearch:9200 >/dev/null || exit 1
              failureThreshold: 50
              initialDelaySeconds: 5
              periodSeconds: 10
              timeoutSeconds: 5
- apiVersion: v1
  kind: Service
  metadata:
    name: elasticsearch
    namespace: "${NAMESPACE}"
    labels:
      app: elasticsearch
      app.kubernetes.io/component: elasticsearch
      app.kubernetes.io/instance: elasticsearch
  spec:
    ports:
      - name: 9200-tcp
        port: 9200
        targetPort: 9200
        protocol: TCP
      - name: 9300-tcp
        port: 9300
        targetPort: 9300
        protocol: TCP
    selector:
      deployment: elasticsearch
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: openvsx-server
    namespace: "${NAMESPACE}"
    labels:
      app: openvsx-server
      app.kubernetes.io/component: openvsx-server
      app.kubernetes.io/instance: openvsx-server
  spec:
    replicas: 1
    selector:
      matchLabels:
        deployment: openvsx-server
    template:
      metadata:
        labels:
          deployment: openvsx-server
      spec:
        containers:
          - name: openvsx-server
            image: ${OPENVSX_SERVER_IMAGE}
            imagePullPolicy: Always
            readinessProbe:
              httpGet:
                path: /api/version
                port: 8080
              failureThreshold: 30
              initialDelaySeconds: 140
              periodSeconds: 10
              timeoutSeconds: 5
            livenessProbe:
              httpGet:
                path: /api/version
                port: 8080
              failureThreshold: 30
              initialDelaySeconds: 160
              periodSeconds: 20
              timeoutSeconds: 5
            terminationMessagePath: /dev/termination-log
            resources:
              requests:
                cpu: 100m
                memory: 512Mi
              limits:
                cpu: 200m
                memory: 1024Mi
            env:
              - name: GITHUB_CLIENT_ID
                valueFrom:
                  secretKeyRef:
                    name: github-oauth
                    key: client-id
              - name: GITHUB_CLIENT_SECRET
                valueFrom:
                  secretKeyRef:
                    name: github-oauth
                    key: client-secret
- apiVersion: v1
  kind: Service
  metadata:
    namespace: "${NAMESPACE}"
    labels:
      app: openvsx-server
      app.kubernetes.io/component: openvsx-server
      app.kubernetes.io/instance: openvsx-server
    name: openvsx-server
  spec:
    ports:
      - name: 8080-tcp
        port: 8080
        targetPort: 8080
    selector:
      deployment: openvsx-server
- apiVersion: v1
  kind: Route
  metadata:
    namespace: "${NAMESPACE}"
    name: "${ROUTE_NAME}"
    labels:
      app.kubernetes.io/instance: openvsx-server
      app.kubernetes.io/component: openvsx-server
  spec:
    to:
      kind: Service
      name: openvsx-server
      weight: 100
    port:
      targetPort: 8080
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
- apiVersion: v1
  kind: Secret
  metadata:
    name: github-oauth
    namespace: "${NAMESPACE}"
  type: Opaque
  data:
    client-id: "${GITHUB_CLIENT_ID_BASE64}"
    client-secret: "${GITHUB_CLIENT_SECRET_BASE64}"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ovsx-cli
    namespace: "${NAMESPACE}"
    labels:
      app: ovsx-cli
      app.kubernetes.io/component: ovsx-cli
      app.kubernetes.io/instance: ovsx-cli
  spec:
    replicas: 1
    selector:
      matchLabels:
        deployment: ovsx-cli
    template:
      metadata:
        labels:
          deployment: ovsx-cli
      spec:
        containers:
          - name: ovsx-cli
            image: ${OPENVSX_CLI_IMAGE}
            imagePullPolicy: Always
            env:
              - name: OVSX_REGISTRY_URL
                value: http://openvsx-server:8080
              - name: OVSX_PAT
                value: eclipse_che_token
            resources:
              requests:
                cpu: 20m
                memory: 128Mi
              limits:
                cpu: 250m
                memory: 256Mi
            command: ["/bin/sh", "-c"]
            args: ["tail -f /dev/null"]

parameters:
- name: ROUTE_NAME
  description: The name of the route to access the OpenVSX Server
  value: "internal"
- name: NAMESPACE
  description: The namespace where the OpenVSX will be deployed
  value: "openvsx"
- name: POSTGERSQL_IMAGE
  value: image-registry.openshift-image-registry.svc:5000/openshift/postgresql:15-el8
  displayName: PostgreSQL image
  description: PostgreSQL image to use for the deployment of the PostgreSQL database
- name: OPENVSX_SERVER_IMAGE
  displayName: OpenVSX Server image
  description: OpenVSX Server image to use for the deployment of the OpenVSX Server
- name: OPENVSX_CLI_IMAGE
  displayName: OpenVSX CLI image
  description: OpenVSX CLI image to use for the deployment of the OpenVSX CLI
- name: OPENVSX_ELASTICSEARCH_IMAGE
  value: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
  displayName: OpenVSX Elasticsearch image
  description: OpenVSX Elasticsearch image to use for the deployment of the OpenVSX Elasticsearch
- name: GITHUB_CLIENT_ID_BASE64
  value: "dummy"
  displayName: GitHub Client ID
  description: Base64 encoded GitHub Client ID
- name: GITHUB_CLIENT_SECRET_BASE64
  value: "dummy"
  displayName: GitHub Client Secret
  description: Base64 encoded GitHub Client Secret
